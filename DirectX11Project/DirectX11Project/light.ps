Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
	float4 specularColor;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;

	//Cample the pixel color from the texture using the samplet at this texture coordinate location
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	//set the default output color to the ambient light value for all pixels
	color = ambientColor;

	//Initialze the specular color
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	//Invert the light direction for calculations
	lightDir = -lightDirection;

	//Calculate the amount of light on the pixel
	lightIntensity = saturate(dot(input.normal, lightDir));

	if (lightIntensity > 0.0f)
	{
		//Determine the final diffuse color based on the fidduse color and the amount of light intensity
		color += (diffuseColor * lightIntensity);

		//Saturate the ambient and diffuse color
		color = saturate(color);

		//Calculate the reflection vector based on the light intensity, normal vector and light direction
		reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		//Determine the amount of specular light based on the redflection vector, viewing direction and specular power
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

	//Multiply the texture pixel and the final diffuse color to get the final pixel color result
	color = color * textureColor;

	//Saturate the final light color
	color = saturate(color + specular);

	return color;
}