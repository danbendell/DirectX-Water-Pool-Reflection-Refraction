SamplerState SampleType;
Texture2D reflectionTexture;
Texture2D refractionTexture;
Texture2D normalTexture;

cbuffer WaterBuffer
{
	float waterTranslation;
	float reflectRefractScale;
	float2 padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float4 reflectionPosition : TEXCOORD1;
	float4 refractionPosition : TEXCOORD2;
};

float4 WaterPixelShader(PixelInputType input) : SV_TARGET
{
	float2 reflectTexCoord;
	float2 refractTexCoord;
	float4 normalMap;
	float3 normal;
	float4 reflectionColor;
	float4 refractionColor;
	float4 color;
	float flipWaterRefracReflec = 0.5f;
	float distanceWaterRefracReflec = 2.0f;

	//Move the position the water normal
	input.tex.y += waterTranslation;

	reflectTexCoord.x = input.reflectionPosition.x / input.reflectionPosition.w / distanceWaterRefracReflec + flipWaterRefracReflec;
	reflectTexCoord.y = -input.reflectionPosition.y / input.reflectionPosition.w / distanceWaterRefracReflec + flipWaterRefracReflec;
	refractTexCoord.x = input.refractionPosition.x / input.refractionPosition.w / distanceWaterRefracReflec + flipWaterRefracReflec;
	refractTexCoord.y = -input.refractionPosition.y / input.refractionPosition.w / distanceWaterRefracReflec + flipWaterRefracReflec;

	normalMap = normalTexture.Sample(SampleType, input.tex);
	normal = (normalMap.xyz * 2.0f) - 1.0f;
	
	reflectTexCoord = reflectTexCoord + (normal.xy * reflectRefractScale);
	refractTexCoord = refractTexCoord + (normal.xy * reflectRefractScale);
    reflectionColor = reflectionTexture.Sample(SampleType, reflectTexCoord);
    refractionColor = refractionTexture.Sample(SampleType, refractTexCoord);

	//Mix reflection and refraction colors
	color = lerp(reflectionColor, refractionColor, 0.6f);

	return color;
}